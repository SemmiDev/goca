basePath: /api/v1
definitions:
  dto.CreateNoteRequest:
    properties:
      description:
        example: This is a note description
        minLength: 5
        type: string
      url:
        example: https://example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    required:
    - description
    - url
    type: object
  dto.CreateNoteResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      description:
        example: This is a note description
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      url:
        example: https://example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        example: sammi@example.com
        type: string
    required:
    - email
    type: object
  dto.GetNoteResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      description:
        example: This is a note description
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      url:
        example: https://example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    type: object
  dto.GetNotesResponse:
    properties:
      list:
        items:
          $ref: '#/definitions/dto.NoteResponse'
        type: array
      paging:
        $ref: '#/definitions/request.Paging'
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: sammi@example.com
        type: string
      password:
        example: Password123@
        type: string
      remember:
        example: false
        type: boolean
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      access_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      email:
        example: sammi@example.com
        type: string
      first_name:
        example: Sammi
        type: string
      full_name:
        example: Sammi Aldhi Yanto
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      last_name:
        example: Aldhi Yanto
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refresh_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entity.UserStatus'
        example: active
      two_factor_enabled:
        example: false
        type: boolean
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  dto.NoteResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      description:
        example: This is a note description
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      url:
        example: https://example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      access_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refresh_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: sammi@example.com
        maxLength: 255
        type: string
      first_name:
        example: Sammi
        maxLength: 100
        minLength: 2
        type: string
      last_name:
        example: Aldhi Yanto
        type: string
      password:
        example: Password123@
        type: string
    required:
    - email
    - first_name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      email:
        example: sammi@example.com
        type: string
      first_name:
        example: Sammi
        type: string
      full_name:
        example: Sammi Aldhi Yanto
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      last_name:
        example: Aldhi Yanto
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entity.UserStatus'
        example: active
      two_factor_enabled:
        example: false
        type: boolean
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
    type: object
  dto.ResendOTPRequest:
    properties:
      email:
        example: sammi@example.com
        type: string
    required:
    - email
    type: object
  dto.ResetPasswordRequest:
    properties:
      email:
        example: sammi@example.com
        type: string
      new_password:
        example: password123
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - new_password
    - otp
    type: object
  dto.Setup2FAResponse:
    properties:
      qr_code:
        description: URL atau data URI untuk QR code
        example: data:image/png;base64,...
        type: string
      secret:
        example: "12345678901234567890"
        type: string
    type: object
  dto.UpdateNoteRequest:
    properties:
      description:
        example: Updated note description
        minLength: 5
        type: string
      note_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      url:
        example: https://updated-example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    type: object
  dto.UpdateNoteResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      description:
        example: This is a note description
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      url:
        example: https://example.com
        type: string
      user_id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
    type: object
  dto.Verify2FARequest:
    properties:
      code:
        example: "123456"
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426655440000
        type: string
    required:
    - code
    - user_id
    type: object
  dto.Verify2FAResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      access_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refresh_token_expires_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      verified:
        example: true
        type: boolean
    type: object
  dto.VerifyOTPRequest:
    properties:
      email:
        example: sammi@example.com
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - otp
    type: object
  dto.VerifyOTPResponse:
    properties:
      created_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
      email:
        example: sammi@example.com
        type: string
      first_name:
        example: Sammi
        type: string
      full_name:
        example: Sammi Aldhi Yanto
        type: string
      id:
        example: 0198f10c-98c7-71ab-bc9a-7e148b5ece17
        type: string
      last_name:
        example: Aldhi Yanto
        type: string
      status:
        allOf:
        - $ref: '#/definitions/entity.UserStatus'
        example: active
      two_factor_enabled:
        example: false
        type: boolean
      updated_at:
        example: "2025-06-01T20:50:35.388851+07:00"
        type: string
    type: object
  entity.UserStatus:
    enum:
    - active
    - inactive
    - pending
    - suspended
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusInactive
    - UserStatusPending
    - UserStatusSuspended
  request.Paging:
    properties:
      current_page:
        type: integer
      from:
        type: integer
      has_next_page:
        type: boolean
      has_previous_page:
        type: boolean
      last_page:
        type: integer
      per_page:
        type: integer
      to:
        type: integer
      total_data:
        type: integer
      total_data_in_current_page:
        type: integer
    type: object
  response.ErrorDetail:
    properties:
      code:
        example: error_code
        type: string
      details:
        additionalProperties:
          type: string
        type: object
      message:
        example: Error message
        type: string
    type: object
  response.Meta:
    properties:
      paging:
        $ref: '#/definitions/request.Paging'
      request_id:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.ErrorDetail'
      message:
        example: Success
        type: string
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: sammidev4@gmail.com
    name: Sammi Aldhi Yanto
    url: https://lab-sammi.gitbook.io
  description: RESTful API for notes taking app
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Notes Taking API
  version: "1.0"
paths:
  /auth/disable-2fa:
    post:
      consumes:
      - application/json
      description: Disable 2FA for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: 2FA disabled successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Disable Two-Factor Authentication
      tags:
      - auth
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send a reset password email to the user
      parameters:
      - description: Forgot password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset password email sent
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Forgot Password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login Successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login a user
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh the authentication token
      parameters:
      - description: Refresh token data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RefreshTokenResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh Token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Register Successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/resend-otp:
    post:
      consumes:
      - application/json
      description: Resend the OTP sent to the user
      parameters:
      - description: Resend OTP data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP resent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Resend OTP
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset the user's password
      parameters:
      - description: Reset password data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Reset Password
      tags:
      - auth
  /auth/setup-2fa:
    post:
      consumes:
      - application/json
      description: Initiate 2FA setup for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: 2FA setup initiated
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.Setup2FAResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Setup Two-Factor Authentication
      tags:
      - auth
  /auth/verify-2fa:
    post:
      consumes:
      - application/json
      description: Verify 2FA for the authenticated user
      parameters:
      - description: Verify 2FA data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.Verify2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.Verify2FAResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Verify Two-Factor Authentication
      tags:
      - auth
  /auth/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify the OTP sent to the user
      parameters:
      - description: OTP verification data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.VerifyOTPResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - auth
  /notes:
    get:
      consumes:
      - application/json
      description: List all notes for the authenticated user with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: per_page
        type: integer
      - description: Search keyword
        in: query
        name: keyword
        type: string
      - description: Sort by column (e.g., created_at)
        in: query
        name: sort_by
        type: string
      - default: asc
        description: Sort direction (asc/desc)
        in: query
        name: sort_direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notes listed successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetNotesResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: List notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Create a new note for the authenticated user
      parameters:
      - description: Note creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateNoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Note created successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CreateNoteResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a new note
      tags:
      - notes
  /notes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a note by its ID for the authenticated user
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete a note
      tags:
      - notes
    get:
      consumes:
      - application/json
      description: Retrieve a specific note by its ID for the authenticated user
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Note retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.GetNoteResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a note by ID
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Update an existing note for the authenticated user
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      - description: Note update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateNoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Note updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UpdateNoteResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update a note
      tags:
      - notes
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer" followed by a space and JWT token. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
